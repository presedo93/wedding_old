// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: guests.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGuest = `-- name: CreateGuest :one
INSERT INTO guests (
  user_id, name, phone, is_vegetarian, allergies, needs_transport
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, created_at, updated_at, name, phone, is_vegetarian, allergies, needs_transport
`

type CreateGuestParams struct {
	UserID         string   `db:"user_id" json:"user_id"`
	Name           string   `db:"name" json:"name"`
	Phone          string   `db:"phone" json:"phone"`
	IsVegetarian   bool     `db:"is_vegetarian" json:"is_vegetarian"`
	Allergies      []string `db:"allergies" json:"allergies"`
	NeedsTransport bool     `db:"needs_transport" json:"needs_transport"`
}

func (q *Queries) CreateGuest(ctx context.Context, arg CreateGuestParams) (Guest, error) {
	row := q.db.QueryRow(ctx, createGuest,
		arg.UserID,
		arg.Name,
		arg.Phone,
		arg.IsVegetarian,
		arg.Allergies,
		arg.NeedsTransport,
	)
	var i Guest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Phone,
		&i.IsVegetarian,
		&i.Allergies,
		&i.NeedsTransport,
	)
	return i, err
}

const deleteGuest = `-- name: DeleteGuest :exec
DELETE FROM guests WHERE id = $1
`

func (q *Queries) DeleteGuest(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteGuest, id)
	return err
}

const deleteUserGuest = `-- name: DeleteUserGuest :exec
DELETE FROM guests WHERE user_id = $1
`

func (q *Queries) DeleteUserGuest(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteUserGuest, userID)
	return err
}

const getAllGuests = `-- name: GetAllGuests :many
SELECT id, user_id, created_at, updated_at, name, phone, is_vegetarian, allergies, needs_transport FROM guests ORDER BY id LIMIT $1 OFFSET $2
`

type GetAllGuestsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetAllGuests(ctx context.Context, arg GetAllGuestsParams) ([]Guest, error) {
	rows, err := q.db.Query(ctx, getAllGuests, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Guest{}
	for rows.Next() {
		var i Guest
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Phone,
			&i.IsVegetarian,
			&i.Allergies,
			&i.NeedsTransport,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGuest = `-- name: GetGuest :one
SELECT id, user_id, created_at, updated_at, name, phone, is_vegetarian, allergies, needs_transport FROM guests WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGuest(ctx context.Context, id int64) (Guest, error) {
	row := q.db.QueryRow(ctx, getGuest, id)
	var i Guest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Phone,
		&i.IsVegetarian,
		&i.Allergies,
		&i.NeedsTransport,
	)
	return i, err
}

const getUserGuests = `-- name: GetUserGuests :many
SELECT id, user_id, created_at, updated_at, name, phone, is_vegetarian, allergies, needs_transport FROM guests WHERE user_id = $1
`

func (q *Queries) GetUserGuests(ctx context.Context, userID string) ([]Guest, error) {
	rows, err := q.db.Query(ctx, getUserGuests, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Guest{}
	for rows.Next() {
		var i Guest
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Phone,
			&i.IsVegetarian,
			&i.Allergies,
			&i.NeedsTransport,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGuest = `-- name: UpdateGuest :one
UPDATE guests
SET
  name = COALESCE($1, name),
  phone = COALESCE($2, phone),
  is_vegetarian = COALESCE($3, is_vegetarian),
  allergies = COALESCE($4, allergies),
  needs_transport = COALESCE($5, needs_transport),
  updated_at = now()
WHERE id = $6
RETURNING id, user_id, created_at, updated_at, name, phone, is_vegetarian, allergies, needs_transport
`

type UpdateGuestParams struct {
	Name           pgtype.Text `db:"name" json:"name"`
	Phone          pgtype.Text `db:"phone" json:"phone"`
	IsVegetarian   pgtype.Bool `db:"is_vegetarian" json:"is_vegetarian"`
	Allergies      []string    `db:"allergies" json:"allergies"`
	NeedsTransport pgtype.Bool `db:"needs_transport" json:"needs_transport"`
	ID             int64       `db:"id" json:"id"`
}

func (q *Queries) UpdateGuest(ctx context.Context, arg UpdateGuestParams) (Guest, error) {
	row := q.db.QueryRow(ctx, updateGuest,
		arg.Name,
		arg.Phone,
		arg.IsVegetarian,
		arg.Allergies,
		arg.NeedsTransport,
		arg.ID,
	)
	var i Guest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Phone,
		&i.IsVegetarian,
		&i.Allergies,
		&i.NeedsTransport,
	)
	return i, err
}
