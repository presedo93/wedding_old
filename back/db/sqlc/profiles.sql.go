// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: profiles.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (
  id, name, phone, email, picture_url, completed_profile, added_guests, added_songs, added_pictures
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, created_at, updated_at, name, phone, email, picture_url, completed_profile, added_guests, added_songs, added_pictures
`

type CreateProfileParams struct {
	ID               uuid.UUID   `db:"id" json:"id"`
	Name             string      `db:"name" json:"name"`
	Phone            string      `db:"phone" json:"phone"`
	Email            string      `db:"email" json:"email"`
	PictureUrl       pgtype.Text `db:"picture_url" json:"picture_url"`
	CompletedProfile bool        `db:"completed_profile" json:"completed_profile"`
	AddedGuests      bool        `db:"added_guests" json:"added_guests"`
	AddedSongs       bool        `db:"added_songs" json:"added_songs"`
	AddedPictures    bool        `db:"added_pictures" json:"added_pictures"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile,
		arg.ID,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.PictureUrl,
		arg.CompletedProfile,
		arg.AddedGuests,
		arg.AddedSongs,
		arg.AddedPictures,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.PictureUrl,
		&i.CompletedProfile,
		&i.AddedGuests,
		&i.AddedSongs,
		&i.AddedPictures,
	)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM profiles WHERE id = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProfile, id)
	return err
}

const getProfile = `-- name: GetProfile :one
SELECT id, created_at, updated_at, name, phone, email, picture_url, completed_profile, added_guests, added_songs, added_pictures FROM profiles WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProfile(ctx context.Context, id uuid.UUID) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfile, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.PictureUrl,
		&i.CompletedProfile,
		&i.AddedGuests,
		&i.AddedSongs,
		&i.AddedPictures,
	)
	return i, err
}

const getProfiles = `-- name: GetProfiles :many
SELECT id, created_at, updated_at, name, phone, email, picture_url, completed_profile, added_guests, added_songs, added_pictures FROM profiles ORDER BY created_at LIMIT $1 OFFSET $2
`

type GetProfilesParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetProfiles(ctx context.Context, arg GetProfilesParams) ([]Profile, error) {
	rows, err := q.db.Query(ctx, getProfiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Profile{}
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.PictureUrl,
			&i.CompletedProfile,
			&i.AddedGuests,
			&i.AddedSongs,
			&i.AddedPictures,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profiles
SET
  name = COALESCE($1, name),
  phone = COALESCE($2, phone),
  email = COALESCE($3, email),
  picture_url = COALESCE($4, picture_url),
  completed_profile = COALESCE($5, completed_profile),
  added_guests = COALESCE($6, added_guests),
  added_songs = COALESCE($7, added_songs),
  added_pictures = COALESCE($8, added_pictures),
  updated_at = now()
WHERE id = $9
RETURNING id, created_at, updated_at, name, phone, email, picture_url, completed_profile, added_guests, added_songs, added_pictures
`

type UpdateProfileParams struct {
	Name             pgtype.Text `db:"name" json:"name"`
	Phone            pgtype.Text `db:"phone" json:"phone"`
	Email            pgtype.Text `db:"email" json:"email"`
	PictureUrl       pgtype.Text `db:"picture_url" json:"picture_url"`
	CompletedProfile pgtype.Bool `db:"completed_profile" json:"completed_profile"`
	AddedGuests      pgtype.Bool `db:"added_guests" json:"added_guests"`
	AddedSongs       pgtype.Bool `db:"added_songs" json:"added_songs"`
	AddedPictures    pgtype.Bool `db:"added_pictures" json:"added_pictures"`
	ID               uuid.UUID   `db:"id" json:"id"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, updateProfile,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.PictureUrl,
		arg.CompletedProfile,
		arg.AddedGuests,
		arg.AddedSongs,
		arg.AddedPictures,
		arg.ID,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.PictureUrl,
		&i.CompletedProfile,
		&i.AddedGuests,
		&i.AddedSongs,
		&i.AddedPictures,
	)
	return i, err
}
